{
  "version": "1.0.0",
  "items": [
  {
    "alias": "element.all(locator)",
    "description": "ElementArrayFinder is used for operations on an array of elements (as opposed\nto a single element).",
    "example": "element.all(by.css('.items li')).then(function(items) {\n  expect(items.length).toBe(3);\n  expect(items[0].getText()).toBe('First');\n});",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "An element locator.",
        "startingLine": 87,
        "typeExpression": "webdriver.Locator",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Locator"
        },
        "typeList": [
          "webdriver.Locator"
        ],
        "name": "locator",
        "paramString": "webdriver.Locator"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The element finder previous to   this. (i.e. opt_parentElementFinder.all(locator) => this)",
        "startingLine": 88,
        "typeExpression": "ElementFinder=",
        "type": {
          "type": "NameExpression",
          "name": "ElementFinder",
          "optional": true
        },
        "typeList": [
          "ElementFinder"
        ],
        "optional": true,
        "name": "opt_parentElementFinder",
        "paramString": "[ElementFinder]="
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 90,
      "typeExpression": "ElementArrayFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementArrayFinder"
      },
      "typeList": [
        "ElementArrayFinder"
      ]
    },
    "returnString": "[ElementArrayFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L69",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).getWebElements()",
    "description": "Returns the array of WebElements represented by this ElementArrayFinder. ",
    "fileName": "protractor",
    "name": "ElementArrayFinder.prototype.getWebElements",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 104,
      "typeExpression": "Array.<webdriver.WebElement>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "Array"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "webdriver.WebElement"
          }
        ]
      },
      "typeList": [
        "Array.<webdriver.WebElement>"
      ]
    },
    "returnString": "Array.&lt;[webdriver.WebElement]&gt;",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L101"
  },
  {
    "alias": "element.all(locator).get(index)",
    "description": "Get an element found by the locator by index. The index starts at 0. \nThis does not actually retrieve the underlying element.",
    "example": "var list = element.all(by.css('.items li'));\nexpect(list.get(0).getText()).toBe('First');\nexpect(list.get(1).getText()).toBe('Second');",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.get",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Element index.",
        "startingLine": 143,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "index",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "finder representing element at the given index.",
      "startingLine": 144,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L127",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).first()",
    "description": "Get the first matching element for the locator. This does not actually \nretrieve the underlying element.",
    "example": "var first = element.all(by.css('.items li')).first();\nexpect(first.getText()).toBe('First');",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.first",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "finder representing the first matching element",
      "startingLine": 166,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L151",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).last()",
    "description": "Get the last matching element for the locator. This does not actually \nretrieve the underlying element.",
    "example": "var last = element.all(by.css('.items li')).last();\nexpect(last.getText()).toBe('Third');",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.last",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "finder representing the last matching element",
      "startingLine": 188,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L173",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).count()",
    "description": "Count the number of elements found by the locator.",
    "example": "var list = element.all(by.css('.items li'));\nexpect(list.count()).toBe(3);",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.count",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise which resolves to the number of elements matching the locator.",
      "startingLine": 209,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L195",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).each(eachFunction)",
    "description": "Calls the input function on each ElementFinder found by the locator.",
    "example": "element.all(by.css('.items li')).each(function(element) {\n  // Will print First, Second, Third.\n  element.getText().then(console.log);\n});",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.each",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Input function",
        "startingLine": 278,
        "typeExpression": "function(ElementFinder)",
        "type": {
          "type": "FunctionType",
          "params": [
            {
              "type": "NameExpression",
              "name": "ElementFinder"
            }
          ]
        },
        "typeList": [
          "function(ElementFinder)"
        ],
        "name": "fn",
        "paramString": "function([ElementFinder])"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L262",
    "view": "<ul class=\"items\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).map(mapFunction)",
    "description": "Apply a map function to each element found using the locator. The\ncallback receives the ElementFinder as the first argument and the index as\na second arg.",
    "example": "var items = element.all(by.css('.items li')).map(function(elm, index) {\n  return {\n    index: index,\n    text: elm.getText(),\n    class: elm.getAttribute('class')\n  };\n});\nexpect(items).toEqual([\n  {index: 0, text: 'First', class: 'one'},\n  {index: 1, text: 'Second', class: 'two'},\n  {index: 2, text: 'Third', class: 'three'}\n]);",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li class=&quot;one&quot;&gt;First&lt;/li&gt;\n  &lt;li class=&quot;two&quot;&gt;Second&lt;/li&gt;\n  &lt;li class=&quot;three&quot;&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.map",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Map function that will be applied to each element.",
        "startingLine": 315,
        "typeExpression": "function(ElementFinder, number)",
        "type": {
          "type": "FunctionType",
          "params": [
            {
              "type": "NameExpression",
              "name": "ElementFinder"
            },
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "typeList": [
          "function(ElementFinder, number)"
        ],
        "name": "mapFn",
        "paramString": "function([ElementFinder], number)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that resolves to an array of values returned by the map function.",
      "startingLine": 317,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L289",
    "view": "<ul class=\"items\">\n  <li class=\"one\">First</li>\n  <li class=\"two\">Second</li>\n  <li class=\"three\">Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).filter(filterFn)",
    "description": "Apply a filter function to each element found using the locator. Returns \npromise of a new array with all elements that pass the filter function. The\nfilter function receives the ElementFinder as the first argument \nand the index as a second arg.",
    "example": "element.all(by.css('.items li')).filter(function(elem, index) {\n  return elem.getText().then(function(text) {\n    return text === 'Third';\n  });\n}).then(function(filteredElements) {\n  filteredElements[0].click();\n});",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li class=&quot;one&quot;&gt;First&lt;/li&gt;\n  &lt;li class=&quot;two&quot;&gt;Second&lt;/li&gt;\n  &lt;li class=&quot;three&quot;&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.filter",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Filter function that will test if an element should be returned. filterFn should return a promise that resolves to a boolean.",
        "startingLine": 357,
        "typeExpression": "function(ElementFinder, number): webdriver.WebElement.Promise",
        "type": {
          "type": "FunctionType",
          "params": [
            {
              "type": "NameExpression",
              "name": "ElementFinder"
            },
            {
              "type": "NameExpression",
              "name": "number"
            }
          ],
          "result": {
            "type": "NameExpression",
            "name": "webdriver.WebElement.Promise"
          }
        },
        "typeList": [
          "function(ElementFinder, number): webdriver.WebElement.Promise"
        ],
        "name": "filterFn",
        "paramString": "function([ElementFinder], number): webdriver.WebElement.Promise"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that resolves to an array of ElementFinders that satisfy the filter function.",
      "startingLine": 360,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L335",
    "view": "<ul class=\"items\">\n  <li class=\"one\">First</li>\n  <li class=\"two\">Second</li>\n  <li class=\"three\">Third</li>\n</ul>"
  },
  {
    "alias": "element.all(locator).reduce(reduceFn)",
    "description": "Apply a reduce function against an accumulator and every element found \nusing the locator (from left-to-right). The reduce function has to reduce\nevery element into a single value (the accumulator). Returns promise of \nthe accumulator. The reduce function receives the accumulator, current \nElementFinder, the index, and the entire array of ElementFinders, \nrespectively.",
    "example": "var value = element.all(by.css('.items li')).reduce(function(acc, elem) {\n  return elem.getText().then(function(text) {\n    return acc + text + ' ';\n  });\n});\n\nexpect(value).toEqual('First Second Third ');",
    "fileName": "protractor",
    "htmlView": "&lt;ul class=&quot;items&quot;&gt;\n  &lt;li class=&quot;one&quot;&gt;First&lt;/li&gt;\n  &lt;li class=&quot;two&quot;&gt;Second&lt;/li&gt;\n  &lt;li class=&quot;three&quot;&gt;Third&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ElementArrayFinder.prototype.reduce",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Reduce function that reduces every element into a single value.",
        "startingLine": 402,
        "typeExpression": "function(number, ElementFinder, number, Array.<ElementFinder>)",
        "type": {
          "type": "FunctionType",
          "params": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "ElementFinder"
            },
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "ElementFinder"
                }
              ]
            }
          ]
        },
        "typeList": [
          "function(number, ElementFinder, number, Array.<ElementFinder>)"
        ],
        "name": "reduceFn",
        "paramString": "function(number, [ElementFinder], number, Array.&lt;ElementFinder&gt;)"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Initial value of the accumulator.",
        "startingLine": 404,
        "typeExpression": "*",
        "type": {
          "type": "AllLiteral"
        },
        "typeList": [
          "*"
        ],
        "name": "initialValue",
        "paramString": "*"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that resolves to the final value of the accumulator.",
      "startingLine": 405,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L378",
    "view": "<ul class=\"items\">\n  <li class=\"one\">First</li>\n  <li class=\"two\">Second</li>\n  <li class=\"three\">Third</li>\n</ul>"
  },
  {
    "alias": "element(locator)",
    "description": "The ElementFinder can be treated as a WebElement for most purposes, in \nparticular, you may perform actions (i.e. click, getText) on them as you\nwould a WebElement. ElementFinders extend Promise, and once an action \nis performed on an ElementFinder, the latest result from the chain can be \naccessed using then. Unlike a WebElement, an ElementFinder will wait for\nangular to settle before performing finds or actions.\n\nElementFinder can be used to build a chain of locators that is used to find\nan element. An ElementFinder does not actually attempt to find the element \nuntil an action is called, which means they can be set up in helper files \nbefore the page is available. ",
    "example": "// Find element with {{scopeVar}} syntax.\nelement(by.binding('person.name')).getText().then(function(name) {\n  expect(name).toBe('Foo');\n});\n\n// Find element with ng-bind=\"scopeVar\" syntax.\nexpect(element(by.binding('person.email')).getText()).toBe('foo@bar.com');\n\n// Find by model.\nvar input = element(by.model('person.name'));\ninput.sendKeys('123');\nexpect(input.getAttribute('value')).toBe('Foo123');",
    "fileName": "protractor",
    "htmlView": "&lt;span&gt;{{person.name}}&lt;/span&gt;\n&lt;span ng-bind=&quot;person.email&quot;&gt;&lt;/span&gt;\n&lt;input type=&quot;text&quot; ng-model=&quot;person.name&quot;/&gt;",
    "name": "ElementFinder",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "An element locator.",
        "startingLine": 454,
        "typeExpression": "webdriver.Locator",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Locator"
        },
        "typeList": [
          "webdriver.Locator"
        ],
        "name": "locator",
        "paramString": "webdriver.Locator"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The element finder previous  to this. (i.e. opt_parentElementFinder.element(locator) => this)",
        "startingLine": 455,
        "typeExpression": "ElementFinder=",
        "type": {
          "type": "NameExpression",
          "name": "ElementFinder",
          "optional": true
        },
        "typeList": [
          "ElementFinder"
        ],
        "optional": true,
        "name": "opt_parentElementFinder",
        "paramString": "[ElementFinder]="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The promise which  will be retrieved with then. Resolves to the latest action result,  or null if no action has been called.",
        "startingLine": 457,
        "typeExpression": "webdriver.promise.Promise",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "typeList": [
          "webdriver.promise.Promise"
        ],
        "name": "opt_actionResult",
        "paramString": "webdriver.promise.Promise"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The index of the element to retrieve. null means retrieve the only element, while -1 means retrieve the last element",
        "startingLine": 460,
        "typeExpression": "number=",
        "type": {
          "type": "NameExpression",
          "name": "number",
          "optional": true
        },
        "typeList": [
          "number"
        ],
        "optional": true,
        "name": "opt_index",
        "paramString": "number="
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 462,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L421",
    "view": "<span>{{person.name}}</span>\n<span ng-bind=\"person.email\"></span>\n<input type=\"text\" ng-model=\"person.name\"/>"
  },
  {
    "alias": "element(locator).element(locator)",
    "description": "Calls to element may be chained to find elements within a parent.",
    "example": "// Chain 2 element calls.\nvar child = element(by.css('.parent')).\n    element(by.css('.child'));\nexpect(child.getText()).toBe('Child text\\n555-123-4567');\n\n// Chain 3 element calls.\nvar triple = element(by.css('.parent')).\n    element(by.css('.child')).\n    element(by.binding('person.phone'));\nexpect(triple.getText()).toBe('555-123-4567');",
    "fileName": "protractor",
    "htmlView": "&lt;div class=&quot;parent&quot;&gt;\n  &lt;div class=&quot;child&quot;&gt;\n    Child text\n    &lt;div&gt;{{person.phone}}&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;",
    "name": "ElementFinder.prototype.element",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 521,
        "typeExpression": "webdriver.Locator",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Locator"
        },
        "typeList": [
          "webdriver.Locator"
        ],
        "name": "subLocator",
        "paramString": "webdriver.Locator"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 522,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L498",
    "view": "<div class=\"parent\">\n  <div class=\"child\">\n    Child text\n    <div>{{person.phone}}</div>\n  </div>\n</div>"
  },
  {
    "alias": "element(locator).all(locator)",
    "description": "Calls to element may be chained to find an array of elements within a parent.",
    "example": "var items = element(by.css('.parent')).all(by.tagName('li'))",
    "fileName": "protractor",
    "htmlView": "&lt;div class=&quot;parent&quot;&gt;\n  &lt;ul&gt;\n    &lt;li class=&quot;one&quot;&gt;First&lt;/li&gt;\n    &lt;li class=&quot;two&quot;&gt;Second&lt;/li&gt;\n    &lt;li class=&quot;three&quot;&gt;Third&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;",
    "name": "ElementFinder.prototype.all",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 544,
        "typeExpression": "webdriver.Locator",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Locator"
        },
        "typeList": [
          "webdriver.Locator"
        ],
        "name": "subLocator",
        "paramString": "webdriver.Locator"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 545,
      "typeExpression": "ElementArrayFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementArrayFinder"
      },
      "typeList": [
        "ElementArrayFinder"
      ]
    },
    "returnString": "[ElementArrayFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L529",
    "view": "<div class=\"parent\">\n  <ul>\n    <li class=\"one\">First</li>\n    <li class=\"two\">Second</li>\n    <li class=\"three\">Third</li>\n  </ul>\n</div>"
  },
  {
    "alias": "$(cssSelector)",
    "description": "Shortcut for querying the document directly with css.",
    "example": "var item = $('.count .two');\nexpect(item.getText()).toBe('Second');",
    "fileName": "protractor",
    "htmlView": "&lt;div class=&quot;count&quot;&gt;\n  &lt;span class=&quot;one&quot;&gt;First&lt;/span&gt;\n  &lt;span class=&quot;two&quot;&gt;Second&lt;/span&gt;\n&lt;/div&gt;",
    "name": "ElementFinder.prototype.$",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A css selector",
        "startingLine": 565,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "selector",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which identifies the located  [webdriver.WebElement]",
      "startingLine": 566,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L552",
    "view": "<div class=\"count\">\n  <span class=\"one\">First</span>\n  <span class=\"two\">Second</span>\n</div>"
  },
  {
    "alias": "$$(cssSelector)",
    "description": "Shortcut for querying the document directly with css.",
    "example": "// The following protractor expressions are equivalent.\nvar list = element.all(by.css('.count span'));\nexpect(list.count()).toBe(2);\n\nlist = $$('.count span');\nexpect(list.count()).toBe(2);\nexpect(list.get(0).getText()).toBe('First');\nexpect(list.get(1).getText()).toBe('Second');",
    "fileName": "protractor",
    "htmlView": "&lt;div class=&quot;count&quot;&gt;\n  &lt;span class=&quot;one&quot;&gt;First&lt;/span&gt;\n  &lt;span class=&quot;two&quot;&gt;Second&lt;/span&gt;\n&lt;/div&gt;",
    "name": "ElementFinder.prototype.$$",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "a css selector",
        "startingLine": 593,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "selector",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which identifies the array of the located [webdriver.WebElement]s.",
      "startingLine": 594,
      "typeExpression": "ElementArrayFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementArrayFinder"
      },
      "typeList": [
        "ElementArrayFinder"
      ]
    },
    "returnString": "[ElementArrayFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L574",
    "view": "<div class=\"count\">\n  <span class=\"one\">First</span>\n  <span class=\"two\">Second</span>\n</div>"
  },
  {
    "description": "Determine whether the element is present on the page.",
    "example": "// Element exists.\nexpect(element(by.binding('person.name')).isPresent()).toBe(true);\n\n// Element not present.\nexpect(element(by.binding('notPresent')).isPresent()).toBe(false);",
    "fileName": "protractor",
    "htmlView": "&lt;span&gt;{{person.name}}&lt;/span&gt;",
    "name": "ElementFinder.prototype.isPresent",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which resolves to whether the element is present on the page.",
      "startingLine": 614,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L602",
    "view": "<span>{{person.name}}</span>"
  },
  {
    "description": "Override for WebElement.prototype.isElementPresent so that protractor waits\nfor Angular to settle before making the check.",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.isElementPresent",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which resolves to whether the element is present on the page.",
      "startingLine": 631,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L627"
  },
  {
    "description": "Get the element locator used to create this element finder.",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.locator",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "An element locator.",
      "startingLine": 640,
      "typeExpression": "webdriver.Locator",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.Locator"
      },
      "typeList": [
        "webdriver.Locator"
      ]
    },
    "returnString": "webdriver.Locator",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L639"
  },
  {
    "description": "Returns the WebElement represented by this ElementFinder. \nThrows the WebDriver error if the element doesn't exist.\nIf index is null, it makes sure that there is only one underlying\nWebElement described by the chain of locators and issues a warning \notherwise. If index is not null, it retrieves the WebElement specified by \nthe index.",
    "example": "The following three expressions are equivalent.\n - element(by.css('.parent')).getWebElement();\n - browser.waitForAngular(); browser.driver.findElement(by.css('.parent'));\n - browser.findElement(by.css('.parent'))",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.getWebElement",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 660,
      "typeExpression": "webdriver.WebElement",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebElement"
      },
      "typeList": [
        "webdriver.WebElement"
      ]
    },
    "returnString": "[webdriver.WebElement]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L647"
  },
  {
    "description": "Evaluates the input as if it were on the scope of the current element.",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.evaluate",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 701,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "expression",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which resolves to the evaluated expression. The result will be resolved as in {@link webdriver.WebDriver.executeScript}. In summary - primitives will be resolved as is, functions will be converted to string, and elements will be returned as a WebElement.",
      "startingLine": 703,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L700"
  },
  {
    "description": "Determine if animation is allowed on the current element.",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.allowAnimations",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 719,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "value",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "which resolves to whether animation is allowed.",
      "startingLine": 721,
      "typeExpression": "ElementFinder",
      "type": {
        "type": "NameExpression",
        "name": "ElementFinder"
      },
      "typeList": [
        "ElementFinder"
      ]
    },
    "returnString": "[ElementFinder]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L718"
  },
  {
    "description": "Access the underlying actionResult of ElementFinder. Implementation allows\nElementFinder to be used as a webdriver.promise.Promise",
    "fileName": "protractor",
    "name": "ElementFinder.prototype.then",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Function which takes  the value of the underlying actionResult.",
        "startingLine": 734,
        "typeExpression": "function(webdriver.promise.Promise)",
        "type": {
          "type": "FunctionType",
          "params": [
            {
              "type": "NameExpression",
              "name": "webdriver.promise.Promise"
            }
          ]
        },
        "typeList": [
          "function(webdriver.promise.Promise)"
        ],
        "name": "fn",
        "paramString": "function(webdriver.promise.Promise)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "Promise which contains the results of  evaluating fn.",
      "startingLine": 737,
      "typeExpression": "webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise"
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L732"
  },
  {
    "alias": "browser",
    "description": "",
    "extends": "{webdriver.WebDriver}",
    "fileName": "protractor",
    "name": "Protractor",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 763,
        "typeExpression": "webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver"
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "webdriver",
        "paramString": "[webdriver.WebDriver]"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A base URL to run get requests against.",
        "startingLine": 764,
        "typeExpression": "string=",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "optional": true
        },
        "typeList": [
          "string"
        ],
        "optional": true,
        "name": "opt_baseUrl",
        "paramString": "string="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Selector element that has an ng-app in scope.",
        "startingLine": 765,
        "typeExpression": "string=",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "optional": true
        },
        "typeList": [
          "string"
        ],
        "optional": true,
        "name": "opt_rootElement",
        "paramString": "string="
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L760"
  },
  {
    "description": "Instruct webdriver to wait until Angular has finished rendering and has\nno outstanding $http calls before continuing.",
    "fileName": "protractor",
    "name": "Protractor.prototype.waitForAngular",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to the scripts return value.",
      "startingLine": 881,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L878"
  },
  {
    "description": "Waits for Angular to finish rendering before searching for elements.",
    "fileName": "protractor",
    "name": "Protractor.prototype.findElement",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 919,
      "typeExpression": "!webdriver.WebElement",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebElement",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebElement"
      ]
    },
    "returnString": "&#33;[webdriver.WebElement]",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L917"
  },
  {
    "description": "Waits for Angular to finish rendering before searching for elements.",
    "fileName": "protractor",
    "name": "Protractor.prototype.findElements",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved to an array of the located [webdriver.WebElement]s.",
      "startingLine": 928,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L926"
  },
  {
    "description": "Tests if an element is present on the page.",
    "fileName": "protractor",
    "name": "Protractor.prototype.isElementPresent",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to whether the element is present on the page.",
      "startingLine": 938,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L936"
  },
  {
    "description": "Add a module to load before Angular whenever Protractor.get is called.\nModules will be registered after existing modules already on the page,\nso any module registered here will override preexisting modules with the same\nname.",
    "fileName": "protractor",
    "name": "Protractor.prototype.addMockModule",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the module to load or override.",
        "startingLine": 953,
        "typeExpression": "!string",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "nullable": false
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "!string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The JavaScript to load the module.",
        "startingLine": 954,
        "typeExpression": "!string|Function",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "string",
          "function()"
        ],
        "name": "script",
        "paramString": "!string&#124;Function"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Any additional arguments will be provided to the script and may be referenced using the `arguments` object.",
        "startingLine": 955,
        "typeExpression": "...*",
        "type": {
          "type": "AllLiteral",
          "repeatable": true
        },
        "typeList": [
          "*"
        ],
        "name": "varArgs",
        "paramString": "...*"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L948"
  },
  {
    "description": "Clear the list of registered mock modules.",
    "fileName": "protractor",
    "name": "Protractor.prototype.clearMockModules",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L969"
  },
  {
    "description": "Remove a registered mock module.",
    "fileName": "protractor",
    "name": "Protractor.prototype.removeMockModule",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the module to remove.",
        "startingLine": 977,
        "typeExpression": "!string",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "nullable": false
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "!string"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L976"
  },
  {
    "description": "See webdriver.WebDriver.get\n\nNavigate to the given destination and loads mock modules before\nAngular. Assumes that the page being loaded uses Angular.\nIf you need to access a page which does not have Angular on load, use\nthe wrapped webdriver directly.",
    "fileName": "protractor",
    "name": "Protractor.prototype.get",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Destination URL.",
        "startingLine": 995,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "destination",
        "paramString": "string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Number of milliseconds to wait for Angular to start.",
        "startingLine": 996,
        "typeExpression": "number=",
        "type": {
          "type": "NameExpression",
          "name": "number",
          "optional": true
        },
        "typeList": [
          "number"
        ],
        "optional": true,
        "name": "opt_timeout",
        "paramString": "number="
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L988"
  },
  {
    "description": "See webdriver.WebDriver.refresh\n\nMakes a full reload of the current page and loads mock modules before\nAngular. Assumes that the page being loaded uses Angular.\nIf you need to access a page which does not have Angular on load, use\nthe wrapped webdriver directly.",
    "fileName": "protractor",
    "name": "Protractor.prototype.refresh",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Number of seconds to wait for Angular to start.",
        "startingLine": 1077,
        "typeExpression": "number=",
        "type": {
          "type": "NameExpression",
          "name": "number",
          "optional": true
        },
        "typeList": [
          "number"
        ],
        "optional": true,
        "name": "opt_timeout",
        "paramString": "number="
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1070"
  },
  {
    "description": "Mixin navigation methods back into the navigation object so that\nthey are invoked as before, i.e. driver.navigate().refresh()",
    "fileName": "protractor",
    "name": "Protractor.prototype.navigate",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1093"
  },
  {
    "description": "Browse to another page using in-page navigation.",
    "fileName": "protractor",
    "name": "Protractor.prototype.setLocation",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "In page URL using the same syntax as $location.url()",
        "startingLine": 1105,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "url",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "returns",
      "description": "A promise that will resolve once page has been changed.",
      "startingLine": 1106,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1103"
  },
  {
    "description": "Returns the current absolute url from AngularJS.",
    "fileName": "protractor",
    "name": "Protractor.prototype.getLocationAbsUrl",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1121"
  },
  {
    "description": "Pauses the test and injects some helper functions into the browser, so that\ndebugging may be done in the browser console.\n\nThis should be used under node in debug mode, i.e. with\nprotractor debug <configuration.js>",
    "example": "While in the debugger, commands can be scheduled through webdriver by\nentering the repl:\n  debug> repl\n  Press Ctrl + C to leave rdebug repl\n  > ptor.findElement(protractor.By.input('user').sendKeys('Laura'));\n  > ptor.debugger();\n  debug> c\n\nThis will run the sendKeys command as the next task, then re-enter the\ndebugger.",
    "fileName": "protractor",
    "name": "Protractor.prototype.debugger",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1129"
  },
  {
    "description": "Beta (unstable) pause function for debugging webdriver tests. Use\nbrowser.pause() in your test to enter the protractor debugger from that\npoint in the control flow.\nDoes not require changes to the command line (no need to add 'debug').",
    "fileName": "protractor",
    "name": "Protractor.prototype.pause",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Optional port to use for the debugging process",
        "startingLine": 1160,
        "typeExpression": "number=",
        "type": {
          "type": "NameExpression",
          "name": "number",
          "optional": true
        },
        "typeList": [
          "number"
        ],
        "optional": true,
        "name": "opt_debugPort",
        "paramString": "number="
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/protractor.js#L1155"
  },
  {
    "alias": "by",
    "description": "The Protractor Locators. These provide ways of finding elements in\nAngular applications by binding, model, etc.",
    "fileName": "locators",
    "name": "ProtractorBy",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L6"
  },
  {
    "description": "webdriver's By is an enum of locator functions, so we must set it to\na prototype before inheriting from it.",
    "fileName": "locators",
    "name": "WebdriverBy.prototype",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L16"
  },
  {
    "alias": "by.addLocator(locatorName, functionOrScript)",
    "description": "Add a locator to this instance of ProtractorBy. This locator can then be\nused with element(by.locatorName(args)).",
    "example": "// Add the custom locator.\nby.addLocator('buttonTextSimple', function(buttonText, opt_parentElement) {\n  // This function will be serialized as a string and will execute in the\n  // browser. The first argument is the text for the button. The second\n  // argument is the parent element, if any.\n  var using = opt_parentElement || document,\n  buttons = using.querySelectorAll('button');\n\n  // Return an array of buttons with the text.\n  return Array.prototype.filter.call(buttons, function(button) {\n    return button.textContent === buttonText;\n  });\n});\n\n// Use the custom locator.\nelement(by.buttonTextSimple('Go!')).click();",
    "fileName": "locators",
    "htmlView": "&lt;button ng-click=&quot;doAddition()&quot;&gt;Go!&lt;/button&gt;",
    "name": "ProtractorBy.prototype.addLocator",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the new locator.",
        "startingLine": 48,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A script to be run in the context of the browser. This script will be passed an array of arguments that contains any args passed into the locator followed by the element scoping the search. It should return an array of elements.",
        "startingLine": 49,
        "typeExpression": "Function|string",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "FunctionType",
              "params": []
            },
            {
              "type": "NameExpression",
              "name": "string"
            }
          ]
        },
        "typeList": [
          "function()",
          "string"
        ],
        "name": "script",
        "paramString": "Function&#124;string"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L23",
    "view": "<button ng-click=\"doAddition()\">Go!</button>"
  },
  {
    "description": "Find an element by binding.",
    "example": "var span1 = element(by.binding('person.name'));\nexpect(span1.getText()).toBe('Foo');\n\nvar span2 = element(by.binding('person.email'));\nexpect(span2.getText()).toBe('foo@bar.com');",
    "fileName": "locators",
    "htmlView": "&lt;span&gt;{{person.name}}&lt;/span&gt;\n&lt;span ng-bind=&quot;person.email&quot;&gt;&lt;/span&gt;",
    "name": "ProtractorBy.prototype.binding",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 90,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "bindingDescriptor",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 91,
      "typeExpression": "{findElementsOverride: findElementsOverride, toString: Function|string}",
      "type": {
        "type": "RecordType",
        "fields": [
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            },
            "value": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            }
          },
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "toString"
            },
            "value": {
              "type": "TypeUnion",
              "elements": [
                {
                  "type": "FunctionType",
                  "params": []
                },
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          }
        ]
      },
      "typeList": [
        "Object"
      ]
    },
    "returnString": "{findElementsOverride: findElementsOverride, toString: Function&#124;string}",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L77",
    "view": "<span>{{person.name}}</span>\n<span ng-bind=\"person.email\"></span>"
  },
  {
    "description": "Find an element by exact binding.",
    "example": "expect(element(by.exactBinding('person.name')).isPresent()).toBe(true);\nexpect(element(by.exactBinding('person-email')).isPresent()).toBe(true);\nexpect(element(by.exactBinding('person')).isPresent()).toBe(false);\nexpect(element(by.exactBinding('person_phone')).isPresent()).toBe(true);\nexpect(element(by.exactBinding('person_phone|uppercase')).isPresent()).toBe(true);\nexpect(element(by.exactBinding('phone')).isPresent()).toBe(false);",
    "fileName": "locators",
    "htmlView": "&lt;span&gt;{{ person.name }}&lt;/span&gt;\n&lt;span ng-bind=&quot;person-email&quot;&gt;&lt;/span&gt;\n&lt;span&gt;{{person_phone|uppercase}}&lt;/span&gt;",
    "name": "ProtractorBy.prototype.exactBinding",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 122,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "bindingDescriptor",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 123,
      "typeExpression": "{findElementsOverride: findElementsOverride, toString: Function|string}",
      "type": {
        "type": "RecordType",
        "fields": [
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            },
            "value": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            }
          },
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "toString"
            },
            "value": {
              "type": "TypeUnion",
              "elements": [
                {
                  "type": "FunctionType",
                  "params": []
                },
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          }
        ]
      },
      "typeList": [
        "Object"
      ]
    },
    "returnString": "{findElementsOverride: findElementsOverride, toString: Function&#124;string}",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L107",
    "view": "<span>{{ person.name }}</span>\n<span ng-bind=\"person-email\"></span>\n<span>{{person_phone|uppercase}}</span>"
  },
  {
    "alias": "by.model(modelName)",
    "description": "Find an element by ng-model expression.",
    "example": "var input = element(by.model('person.name'));\ninput.sendKeys('123');\nexpect(input.getAttribute('value')).toBe('Foo123');",
    "fileName": "locators",
    "htmlView": "&lt;input type=&quot;text&quot; ng-model=&quot;person.name&quot;/&gt;",
    "name": "ProtractorBy.prototype.model",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "ng-model expression.",
        "startingLine": 150,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "model",
        "paramString": "string"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L139",
    "view": "<input type=\"text\" ng-model=\"person.name\"/>"
  },
  {
    "description": "Find a button by text.",
    "example": "element(by.buttonText('Save'));",
    "fileName": "locators",
    "htmlView": "&lt;button&gt;Save&lt;/button&gt;",
    "name": "ProtractorBy.prototype.buttonText",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 173,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "searchText",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 174,
      "typeExpression": "{findElementsOverride: findElementsOverride, toString: Function|string}",
      "type": {
        "type": "RecordType",
        "fields": [
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            },
            "value": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            }
          },
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "toString"
            },
            "value": {
              "type": "TypeUnion",
              "elements": [
                {
                  "type": "FunctionType",
                  "params": []
                },
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          }
        ]
      },
      "typeList": [
        "Object"
      ]
    },
    "returnString": "{findElementsOverride: findElementsOverride, toString: Function&#124;string}",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L165",
    "view": "<button>Save</button>"
  },
  {
    "description": "Find a button by partial text.",
    "example": "element(by.partialButtonText('Save'));",
    "fileName": "locators",
    "htmlView": "&lt;button&gt;Save my file&lt;/button&gt;",
    "name": "ProtractorBy.prototype.partialButtonText",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "",
        "startingLine": 198,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "searchText",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "",
      "startingLine": 199,
      "typeExpression": "{findElementsOverride: findElementsOverride, toString: Function|string}",
      "type": {
        "type": "RecordType",
        "fields": [
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            },
            "value": {
              "type": "NameExpression",
              "name": "findElementsOverride"
            }
          },
          {
            "type": "FieldType",
            "key": {
              "type": "NameExpression",
              "name": "toString"
            },
            "value": {
              "type": "TypeUnion",
              "elements": [
                {
                  "type": "FunctionType",
                  "params": []
                },
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          }
        ]
      },
      "typeList": [
        "Object"
      ]
    },
    "returnString": "{findElementsOverride: findElementsOverride, toString: Function&#124;string}",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L190",
    "view": "<button>Save my file</button>"
  },
  {
    "description": "Find elements inside an ng-repeat.",
    "example": "// Returns the DIV for the second cat.\nvar secondCat = element(by.repeater('cat in pets').row(1));\n\n// Returns the SPAN for the first cat's name.\nvar firstCatName = element(by.repeater('cat in pets').\n    row(0).column('{{cat.name}}'));\n\n// Returns a promise that resolves to an array of WebElements from a column\nvar ages = element.all(\n    by.repeater('cat in pets').column('{{cat.age}}'));\n\n// Returns a promise that resolves to an array of WebElements containing\n// all top level elements repeated by the repeater. For 2 pets rows resolves\n// to an array of 2 elements.\nvar rows = element.all(by.repeater('cat in pets'));\n\n// Returns a promise that resolves to an array of WebElements containing all\n// the elements with a binding to the book's name.\nvar divs = element.all(by.repeater('book in library').column('book.name'));\n\n// Returns a promise that resolves to an array of WebElements containing\n// the DIVs for the second book.\nvar bookInfo = element.all(by.repeater('book in library').row(1));\n\n// Returns the H4 for the first book's name.\nvar firstBookName = element(by.repeater('book in library').\n    row(0).column('{{book.name}}'));\n\n// Returns a promise that resolves to an array of WebElements containing\n// all top level elements repeated by the repeater. For 2 books divs\n// resolves to an array of 4 elements.\nvar divs = element.all(by.repeater('book in library'));",
    "fileName": "locators",
    "htmlView": "&lt;div ng-repeat=&quot;cat in pets&quot;&gt;\n  &lt;span&gt;{{cat.name}}&lt;/span&gt;\n  &lt;span&gt;{{cat.age}}&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;book-img&quot; ng-repeat-start=&quot;book in library&quot;&gt;\n  &lt;span&gt;{{$index}}&lt;/span&gt;\n&lt;/div&gt;\n&lt;div class=&quot;book-info&quot; ng-repeat-end&gt;\n  &lt;h4&gt;{{book.name}}&lt;/h4&gt;\n  &lt;p&gt;{{book.blurb}}&lt;/p&gt;\n&lt;/div&gt;",
    "name": "ProtractorBy.prototype.repeater",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L216",
    "view": "<div ng-repeat=\"cat in pets\">\n  <span>{{cat.name}}</span>\n  <span>{{cat.age}}</span>\n</div>\n\n<div class=\"book-img\" ng-repeat-start=\"book in library\">\n  <span>{{$index}}</span>\n</div>\n<div class=\"book-info\" ng-repeat-end>\n  <h4>{{book.name}}</h4>\n  <p>{{book.blurb}}</p>\n</div>"
  },
  {
    "description": "Find elements by CSS which contain a certain string.",
    "example": "// Returns the DIV for the dog, but not cat.\nvar dog = element(by.cssContainingText('.pet', 'Dog'));",
    "fileName": "locators",
    "htmlView": "&lt;ul&gt;\n  &lt;li class=&quot;pet&quot;&gt;Dog&lt;/li&gt;\n  &lt;li class=&quot;pet&quot;&gt;Cat&lt;/li&gt;\n&lt;/ul&gt;",
    "name": "ProtractorBy.prototype.cssContainingText",
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L331",
    "view": "<ul>\n  <li class=\"pet\">Dog</li>\n  <li class=\"pet\">Cat</li>\n</ul>"
  },
  {
    "alias": "by.options(optionsDescriptor)",
    "description": "Find an element by ng-options expression.",
    "example": "var allOptions = element.all(by.options('c for c in colors'));\nexpect(allOptions.count()).toEqual(2);\nvar firstOption = allOptions.first();\nexpect(firstOption.getText()).toEqual('red');",
    "fileName": "locators",
    "htmlView": "&lt;select ng-model=&quot;color&quot; ng-options=&quot;c for c in colors&quot;&gt;\n  &lt;option value=&quot;0&quot; selected=&quot;selected&quot;&gt;red&lt;/option&gt;\n  &lt;option value=&quot;1&quot;&gt;green&lt;/option&gt;\n&lt;/select&gt;",
    "name": "ProtractorBy.prototype.options",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "ng-options expression.",
        "startingLine": 372,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "optionsDescriptor",
        "paramString": "string"
      }
    ],
    "returnString": "",
    "sourceLink": "https://github.com/angular/protractor/blob/master/lib/locators.js#L357",
    "view": "<select ng-model=\"color\" ng-options=\"c for c in colors\">\n  <option value=\"0\" selected=\"selected\">red</option>\n  <option value=\"1\">green</option>\n</select>"
  },
  {
    "description": "Creates a new WebDriver client, which provides control over a browser.\n\nEvery WebDriver command returns a {@code webdriver.promise.Promise} that\nrepresents the result of that command. Callbacks may be registered on this\nobject to manipulate the command result or catch an expected error. Any\ncommands scheduled with a callback are considered sub-commands and will\nexecute before the next command in the current frame. For example:\n<pre><code>\n  var message = [];\n  driver.call(message.push, message, 'a').then(function() {\n    driver.call(message.push, message, 'b');\n  });\n  driver.call(message.push, message, 'c');\n  driver.call(function() {\n    alert('message is abc? ' + (message.join('') == 'abc'));\n  });\n</code></pre>",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Either a known session or a promise that will be resolved to a session.",
        "startingLine": 65,
        "typeExpression": "!(webdriver.Session|webdriver.promise.Promise)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Session"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.promise.Promise"
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Session",
          "webdriver.promise.Promise"
        ],
        "name": "session",
        "paramString": "!(webdriver.Session&#124;webdriver.promise.Promise)"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The executor to use when sending commands to the browser.",
        "startingLine": 67,
        "typeExpression": "!webdriver.CommandExecutor",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.CommandExecutor",
          "nullable": false
        },
        "typeList": [
          "webdriver.CommandExecutor"
        ],
        "name": "executor",
        "paramString": "!webdriver.CommandExecutor"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The flow to schedule commands through. Defaults to the active flow object.",
        "startingLine": 69,
        "typeExpression": "webdriver.promise.ControlFlow=",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.promise.ControlFlow",
          "optional": true
        },
        "typeList": [
          "webdriver.promise.ControlFlow"
        ],
        "optional": true,
        "name": "opt_flow",
        "paramString": "webdriver.promise.ControlFlow="
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#47"
  },
  {
    "description": "Creates a new WebDriver client for an existing session.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.attachToSession",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Command executor to use when querying for session details.",
        "startingLine": 88,
        "typeExpression": "!webdriver.CommandExecutor",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.CommandExecutor",
          "nullable": false
        },
        "typeList": [
          "webdriver.CommandExecutor"
        ],
        "name": "executor",
        "paramString": "!webdriver.CommandExecutor"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "ID of the session to attach to.",
        "startingLine": 90,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "sessionId",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A new client for the specified session.",
      "startingLine": 91,
      "typeExpression": "!webdriver.WebDriver",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#87"
  },
  {
    "description": "Creates a new WebDriver session.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.createSession",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The executor to create the new session with.",
        "startingLine": 103,
        "typeExpression": "!webdriver.CommandExecutor",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.CommandExecutor",
          "nullable": false
        },
        "typeList": [
          "webdriver.CommandExecutor"
        ],
        "name": "executor",
        "paramString": "!webdriver.CommandExecutor"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired capabilities for the new session.",
        "startingLine": 105,
        "typeExpression": "!webdriver.Capabilities",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Capabilities",
          "nullable": false
        },
        "typeList": [
          "webdriver.Capabilities"
        ],
        "name": "desiredCapabilities",
        "paramString": "!webdriver.Capabilities"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The driver for the newly created session.",
      "startingLine": 107,
      "typeExpression": "!webdriver.WebDriver",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#102"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.controlFlow",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The control flow used by this instance.",
      "startingLine": 243,
      "typeExpression": "!webdriver.promise.ControlFlow",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.ControlFlow",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.ControlFlow"
      ]
    },
    "returnString": "!webdriver.promise.ControlFlow",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#243"
  },
  {
    "description": "Schedules a {@code webdriver.Command} to be executed by this driver's\n{@code webdriver.CommandExecutor}.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.schedule",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The command to schedule.",
        "startingLine": 254,
        "typeExpression": "!webdriver.Command",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Command",
          "nullable": false
        },
        "typeList": [
          "webdriver.Command"
        ],
        "name": "command",
        "paramString": "!webdriver.Command"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A description of the command for debugging.",
        "startingLine": 255,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "description",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the command result.",
      "startingLine": 256,
      "typeExpression": "!webdriver.promise.Promise.<T>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "T"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<T>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;T&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#252"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getSession",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise for this client's session.",
      "startingLine": 305,
      "typeExpression": "!webdriver.promise.Promise.<!webdriver.Session>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "webdriver.Session",
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!webdriver.Session>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!webdriver.Session&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#305"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getCapabilities",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve with the this instance's capabilities.",
      "startingLine": 314,
      "typeExpression": "!webdriver.promise.Promise.<!webdriver.Capabilities>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "webdriver.Capabilities",
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!webdriver.Capabilities>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!webdriver.Capabilities&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#314"
  },
  {
    "description": "Schedules a command to quit the current session. After calling quit, this\ninstance will be invalidated and may no longer be used to issue commands\nagainst the browser.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.quit",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the command has completed.",
      "startingLine": 328,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#325"
  },
  {
    "description": "Creates a new action sequence using this driver. The sequence will not be\nscheduled for execution until {@link webdriver.ActionSequence#perform} is\ncalled. Example:\n<pre><code>\n  driver.actions().\n      mouseDown(element1).\n      mouseMove(element2).\n      mouseUp().\n      perform();\n</code></pre>",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.actions",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A new action sequence for this instance.",
      "startingLine": 354,
      "typeExpression": "!webdriver.ActionSequence",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.ActionSequence",
        "nullable": false
      },
      "typeList": [
        "webdriver.ActionSequence"
      ]
    },
    "returnString": "!webdriver.ActionSequence",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#344"
  },
  {
    "description": "Schedules a command to execute JavaScript in the context of the currently\nselected frame or window. The script fragment will be executed as the body\nof an anonymous function. If the script is provided as a function object,\nthat function will be converted to a string for injection into the target\nwindow.\n\nAny arguments provided in addition to the script will be included as script\narguments and may be referenced using the {@code arguments} object.\nArguments may be a boolean, number, string, or {@code webdriver.WebElement}.\nArrays and objects may also be used as script arguments as long as each item\nadheres to the types previously mentioned.\n\nThe script may refer to any variables accessible from the current window.\nFurthermore, the script will execute in the window's context, thus\n{@code document} may be used to refer to the current document. Any local\nvariables will not be available once the script has finished executing,\nthough global variables will persist.\n\nIf the script has a return value (i.e. if the script contains a return\nstatement), then the following steps will be taken for resolving this\nfunctions return value:\n<ul>\n<li>For a HTML element, the value will resolve to a\n    {@code webdriver.WebElement}</li>\n<li>Null and undefined return values will resolve to null</li>\n<li>Booleans, numbers, and strings will resolve as is</li>\n<li>Functions will resolve to their string representation</li>\n<li>For arrays and objects, each member item will be converted according to\n    the rules above</li>\n</ul>",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.executeScript",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The script to execute.",
        "startingLine": 393,
        "typeExpression": "!(string|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "string",
          "function()"
        ],
        "name": "script",
        "paramString": "!(string&#124;Function)"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The arguments to pass to the script.",
        "startingLine": 394,
        "typeExpression": "...*",
        "type": {
          "type": "AllLiteral",
          "repeatable": true
        },
        "typeList": [
          "*"
        ],
        "name": "var_args",
        "paramString": "...*"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to the scripts return value.",
      "startingLine": 395,
      "typeExpression": "!webdriver.promise.Promise.<T>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "T"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<T>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;T&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#362"
  },
  {
    "description": "Schedules a command to execute asynchronous JavaScript in the context of the\ncurrently selected frame or window. The script fragment will be executed as\nthe body of an anonymous function. If the script is provided as a function\nobject, that function will be converted to a string for injection into the\ntarget window.\n\nAny arguments provided in addition to the script will be included as script\narguments and may be referenced using the {@code arguments} object.\nArguments may be a boolean, number, string, or {@code webdriver.WebElement}.\nArrays and objects may also be used as script arguments as long as each item\nadheres to the types previously mentioned.\n\nUnlike executing synchronous JavaScript with\n{@code webdriver.WebDriver.prototype.executeScript}, scripts executed with\nthis function must explicitly signal they are finished by invoking the\nprovided callback. This callback will always be injected into the\nexecuted function as the last argument, and thus may be referenced with\n{@code arguments[arguments.length - 1]}. The following steps will be taken\nfor resolving this functions return value against the first argument to the\nscript's callback function:\n<ul>\n<li>For a HTML element, the value will resolve to a\n    {@code webdriver.WebElement}</li>\n<li>Null and undefined return values will resolve to null</li>\n<li>Booleans, numbers, and strings will resolve as is</li>\n<li>Functions will resolve to their string representation</li>\n<li>For arrays and objects, each member item will be converted according to\n    the rules above</li>\n</ul>\n\nExample #1: Performing a sleep that is synchronized with the currently\nselected window:\n<code><pre>\nvar start = new Date().getTime();\ndriver.executeAsyncScript(\n    'window.setTimeout(arguments[arguments.length - 1], 500);').\n    then(function() {\n      console.log('Elapsed time: ' + (new Date().getTime() - start) + ' ms');\n    });\n</pre></code>\n\nExample #2: Synchronizing a test with an AJAX application:\n<code><pre>\nvar button = driver.findElement(By.id('compose-button'));\nbutton.click();\ndriver.executeAsyncScript(\n    'var callback = arguments[arguments.length - 1];' +\n    'mailClient.getComposeWindowWidget().onload(callback);');\ndriver.switchTo().frame('composeWidget');\ndriver.findElement(By.id('to')).sendKEys('dog@example.com');\n</pre></code>\n\nExample #3: Injecting a XMLHttpRequest and waiting for the result. In this\nexample, the inject script is specified with a function literal. When using\nthis format, the function is converted to a string for injection, so it\nshould not reference any symbols not defined in the scope of the page under\ntest.\n<code><pre>\ndriver.executeAsyncScript(function() {\n  var callback = arguments[arguments.length - 1];\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"/resource/data.json\", true);\n  xhr.onreadystatechange = function() {\n    if (xhr.readyState == 4) {\n      callback(xhr.resposneText);\n    }\n  }\n  xhr.send('');\n}).then(function(str) {\n  console.log(JSON.parse(str)['food']);\n});\n</pre></code>",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.executeAsyncScript",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The script to execute.",
        "startingLine": 485,
        "typeExpression": "!(string|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "string",
          "function()"
        ],
        "name": "script",
        "paramString": "!(string&#124;Function)"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The arguments to pass to the script.",
        "startingLine": 486,
        "typeExpression": "...*",
        "type": {
          "type": "AllLiteral",
          "repeatable": true
        },
        "typeList": [
          "*"
        ],
        "name": "var_args",
        "paramString": "...*"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to the scripts return value.",
      "startingLine": 487,
      "typeExpression": "!webdriver.promise.Promise.<T>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "T"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<T>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;T&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#412"
  },
  {
    "description": "Schedules a command to execute a custom function.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.call",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The function to execute.",
        "startingLine": 505,
        "typeExpression": "function(...): (T|webdriver.promise.Promise.<T>)",
        "type": {
          "type": "FunctionType",
          "params": [
            ""
          ],
          "result": {
            "type": "TypeUnion",
            "elements": [
              {
                "type": "NameExpression",
                "name": "T"
              },
              {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "webdriver.promise.Promise"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "T"
                  }
                ]
              }
            ]
          }
        },
        "typeList": [
          "function(...): (T|webdriver.promise.Promise.<T>)"
        ],
        "name": "fn",
        "paramString": "function(...): (T&#124;webdriver.promise.Promise.&lt;T&gt;)"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The object in whose scope to execute the function.",
        "startingLine": 507,
        "typeExpression": "Object=",
        "type": {
          "type": "NameExpression",
          "name": "Object",
          "optional": true
        },
        "typeList": [
          "Object"
        ],
        "optional": true,
        "name": "opt_scope",
        "paramString": "Object="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Any arguments to pass to the function.",
        "startingLine": 508,
        "typeExpression": "...*",
        "type": {
          "type": "AllLiteral",
          "repeatable": true
        },
        "typeList": [
          "*"
        ],
        "name": "var_args",
        "paramString": "...*"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved' with the function's result.",
      "startingLine": 509,
      "typeExpression": "!webdriver.promise.Promise.<T>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "T"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<T>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;T&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#504"
  },
  {
    "description": "Schedules a command to wait for a condition to hold, as defined by some\nuser supplied function. If any errors occur while evaluating the wait, they\nwill be allowed to propagate.\n\n<p>In the event a condition returns a {@link webdriver.promise.Promise}, the \npolling loop will wait for it to be resolved and use the resolved value for \nevaluating whether the condition has been satisfied. The resolution time for\na promise is factored into whether a wait has timed out.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.wait",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The function to evaluate as a wait condition.",
        "startingLine": 534,
        "typeExpression": "function():boolean",
        "type": {
          "type": "FunctionType",
          "params": [],
          "result": {
            "type": "NameExpression",
            "name": "boolean"
          }
        },
        "typeList": [
          "function():boolean"
        ],
        "name": "fn",
        "paramString": "function():boolean"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "How long to wait for the condition to be true.",
        "startingLine": 535,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "timeout",
        "paramString": "number"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "An optional message to use if the wait times out.",
        "startingLine": 536,
        "typeExpression": "string=",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "optional": true
        },
        "typeList": [
          "string"
        ],
        "optional": true,
        "name": "opt_message",
        "paramString": "string="
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the wait condition has been satisfied.",
      "startingLine": 538,
      "typeExpression": "!webdriver.promise.Promise",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.promise.Promise",
        "nullable": false
      },
      "typeList": [
        "webdriver.promise.Promise"
      ]
    },
    "returnString": "!webdriver.promise.Promise",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#525"
  },
  {
    "description": "Schedules a command to make the driver sleep for the given amount of time.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.sleep",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The amount of time, in milliseconds, to sleep.",
        "startingLine": 548,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "ms",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the sleep has finished.",
      "startingLine": 549,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#547"
  },
  {
    "description": "Schedules a command to retrieve they current window handle.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getWindowHandle",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the current window handle.",
      "startingLine": 559,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#558"
  },
  {
    "description": "Schedules a command to retrieve the current list of available window handles.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getAllWindowHandles",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with an array of window handles.",
      "startingLine": 571,
      "typeExpression": "!webdriver.promise.Promise.<!Array.<string>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "string"
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!Array.<string>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!Array.&lt;string&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#570"
  },
  {
    "description": "Schedules a command to retrieve the current page's source. The page source\nreturned is a representation of the underlying DOM: do not expect it to be\nformatted or escaped in the same way as the response sent from the web\nserver.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getPageSource",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the current page source.",
      "startingLine": 586,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#582"
  },
  {
    "description": "Schedules a command to close the current window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.close",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when this command has completed.",
      "startingLine": 598,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#597"
  },
  {
    "description": "Schedules a command to navigate to the given URL.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.get",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The fully qualified URL to open.",
        "startingLine": 609,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "url",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the document has finished loading.",
      "startingLine": 610,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#608"
  },
  {
    "description": "Schedules a command to retrieve the URL of the current page.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getCurrentUrl",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the current URL.",
      "startingLine": 620,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#619"
  },
  {
    "description": "Schedules a command to retrieve the current page's title.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.getTitle",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the current page's title.",
      "startingLine": 632,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#631"
  },
  {
    "description": "Schedule a command to find an element on the page. If the element cannot be\nfound, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned\nby the driver. Unlike other commands, this error cannot be suppressed. In\nother words, scheduling a command to find an element doubles as an assert\nthat the element is present on the page. To test whether an element is\npresent on the page, use {@link #isElementPresent} instead.\n\n<p>The search criteria for an element may be defined using one of the\nfactories in the {@link webdriver.By} namespace, or as a short-hand\n{@link webdriver.By.Hash} object. For example, the following two statements\nare equivalent:\n<code><pre>\nvar e1 = driver.findElement(By.id('foo'));\nvar e2 = driver.findElement({id:'foo'});\n</pre></code>\n\n<p>You may also provide a custom locator function, which takes as input\nthis WebDriver instance and returns a {@link webdriver.WebElement}, or a\npromise that will resolve to a WebElement. For example, to find the first\nvisible link on a page, you could write:\n<code><pre>\nvar link = driver.findElement(firstVisibleLink);\n\nfunction firstVisibleLink(driver) {\n  var links = driver.findElements(By.tagName('a'));\n  return webdriver.promise.filter(links, function(link) {\n    return links.isDisplayed();\n  }).then(function(visibleLinks) {\n    return visibleLinks[0];\n  });\n}\n</pre></code>\n\n<p>When running in the browser, a WebDriver cannot manipulate DOM elements\ndirectly; it may do so only through a {@link webdriver.WebElement} reference.\nThis function may be used to generate a WebElement from a DOM element. A\nreference to the DOM element will be stored in a known location and this\ndriver will attempt to retrieve it through {@link #executeScript}. If the\nelement cannot be found (eg, it belongs to a different document than the\none this instance is currently focused on), a\n{@link bot.ErrorCode.NO_SUCH_ELEMENT} error will be returned.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.findElement",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator to use.",
        "startingLine": 684,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Element|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "NameExpression",
              "name": "Element"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "Element",
          "function()"
        ],
        "name": "locator",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Element&#124;Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A WebElement that can be used to issue commands against the located element. If the element is not found, the element will be invalidated and all scheduled commands aborted.",
      "startingLine": 686,
      "typeExpression": "!webdriver.WebElement",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebElement",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebElement"
      ]
    },
    "returnString": "&#33;[webdriver.WebElement]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#642"
  },
  {
    "description": "Schedules a command to test if an element is present on the page.\n\n<p>If given a DOM element, this function will check if it belongs to the\ndocument the driver is currently focused on. Otherwise, the function will\ntest if at least one element can be found with the given search criteria.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.isElementPresent",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator to use, or the actual DOM element to be located by the server.",
        "startingLine": 791,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Element|\n          Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "NameExpression",
              "name": "Element"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "Element",
          "function()"
        ],
        "name": "locatorOrElement",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Element&#124;\n          Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve with whether the element is present on the page.",
      "startingLine": 794,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#785"
  },
  {
    "description": "Schedule a command to search for multiple elements on the page.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.findElements",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator strategy to use when searching for the element.",
        "startingLine": 812,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "function()"
        ],
        "name": "locator",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to an array of WebElements.",
      "startingLine": 814,
      "typeExpression": "!webdriver.promise.Promise.<!Array.<!webdriver.WebElement>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "webdriver.WebElement",
                "nullable": false
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!Array.<!webdriver.WebElement>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!Array.&lt;!webdriver.WebElement&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#810"
  },
  {
    "description": "Schedule a command to take a screenshot. The driver makes a best effort to\nreturn a screenshot of the following, in order of preference:\n<ol>\n  <li>Entire page\n  <li>Current window\n  <li>Visible portion of the current frame\n  <li>The screenshot of the entire display containing the browser\n</ol>",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.takeScreenshot",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved to the screenshot as a base-64 encoded PNG.",
      "startingLine": 866,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#857"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.manage",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The options interface for this instance.",
      "startingLine": 876,
      "typeExpression": "!webdriver.WebDriver.Options",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.Options",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.Options"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.Options]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#876"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.navigate",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The navigation interface for this instance.",
      "startingLine": 885,
      "typeExpression": "!webdriver.WebDriver.Navigation",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.Navigation",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.Navigation"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.Navigation]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#885"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.prototype.switchTo",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The target locator interface for this instance.",
      "startingLine": 894,
      "typeExpression": "!webdriver.WebDriver.TargetLocator",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.TargetLocator",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.TargetLocator"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.TargetLocator]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#894"
  },
  {
    "description": "Interface for navigating back and forth in the browser history.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Navigation",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 905,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#904"
  },
  {
    "description": "Schedules a command to navigate to a new URL.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Navigation.prototype.to",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The URL to navigate to.",
        "startingLine": 917,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "url",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the URL has been loaded.",
      "startingLine": 918,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#916"
  },
  {
    "description": "Schedules a command to move backwards in the browser history.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Navigation.prototype.back",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the navigation event has completed.",
      "startingLine": 931,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#930"
  },
  {
    "description": "Schedules a command to move forwards in the browser history.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Navigation.prototype.forward",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the navigation event has completed.",
      "startingLine": 943,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#942"
  },
  {
    "description": "Schedules a command to refresh the current page.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Navigation.prototype.refresh",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the navigation event has completed.",
      "startingLine": 955,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#954"
  },
  {
    "description": "Provides methods for managing browser and driver state.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 968,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#967"
  },
  {
    "description": "Schedules a command to add a cookie.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.addCookie",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The cookie name.",
        "startingLine": 995,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The cookie value.",
        "startingLine": 996,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "value",
        "paramString": "string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The cookie path.",
        "startingLine": 997,
        "typeExpression": "string=",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "optional": true
        },
        "typeList": [
          "string"
        ],
        "optional": true,
        "name": "opt_path",
        "paramString": "string="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The cookie domain.",
        "startingLine": 998,
        "typeExpression": "string=",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "optional": true
        },
        "typeList": [
          "string"
        ],
        "optional": true,
        "name": "opt_domain",
        "paramString": "string="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Whether the cookie is secure.",
        "startingLine": 999,
        "typeExpression": "boolean=",
        "type": {
          "type": "NameExpression",
          "name": "boolean",
          "optional": true
        },
        "typeList": [
          "boolean"
        ],
        "optional": true,
        "name": "opt_isSecure",
        "paramString": "boolean="
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "When the cookie expires. If specified as a number, should be in milliseconds since midnight, January 1, 1970 UTC.",
        "startingLine": 1000,
        "typeExpression": "(number|!Date)=",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "number"
            },
            {
              "type": "NameExpression",
              "name": "Date",
              "nullable": false
            }
          ],
          "optional": true
        },
        "typeList": [
          "number",
          "Date"
        ],
        "optional": true,
        "name": "opt_expiry",
        "paramString": "(number&#124;!Date)="
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the cookie has been added to the page.",
      "startingLine": 1002,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#994"
  },
  {
    "description": "Schedules a command to delete all cookies visible to the current page.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.deleteAllCookies",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when all cookies have been deleted.",
      "startingLine": 1052,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1051"
  },
  {
    "description": "Schedules a command to delete the cookie with the given name. This command is\na no-op if there is no cookie with the given name visible to the current\npage.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.deleteCookie",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the cookie to delete.",
        "startingLine": 1066,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the cookie has been deleted.",
      "startingLine": 1067,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1063"
  },
  {
    "description": "Schedules a command to retrieve all cookies visible to the current page.\nEach cookie will be returned as a JSON object as described by the WebDriver\nwire protocol.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.getCookies",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the cookies visible to the current page.",
      "startingLine": 1082,
      "typeExpression": "!webdriver.promise.Promise.<\n    !Array.<webdriver.WebDriver.Options.Cookie>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "webdriver.WebDriver.Options.Cookie"
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.< !Array.<webdriver.WebDriver.Options.Cookie>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;\n    !Array.&lt;webdriver.WebDriver.Options.Cookie&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1079"
  },
  {
    "description": "Schedules a command to retrieve the cookie with the given name. Returns null\nif there is no such cookie. The cookie will be returned as a JSON object as\ndescribed by the WebDriver wire protocol.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.getCookie",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the cookie to retrieve.",
        "startingLine": 1098,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "name",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the named cookie, or {@code null} if there is no such cookie.",
      "startingLine": 1099,
      "typeExpression": "!webdriver.promise.Promise.<?webdriver.WebDriver.Options.Cookie>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "webdriver.WebDriver.Options.Cookie",
            "nullable": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<?webdriver.WebDriver.Options.Cookie>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;?webdriver.WebDriver.Options.Cookie&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1095"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.logs",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The interface for managing driver logs.",
      "startingLine": 1114,
      "typeExpression": "!webdriver.WebDriver.Logs",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.Logs",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.Logs"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.Logs]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1114"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.timeouts",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The interface for managing driver timeouts.",
      "startingLine": 1123,
      "typeExpression": "!webdriver.WebDriver.Timeouts",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.Timeouts",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.Timeouts"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.Timeouts]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1123"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Options.prototype.window",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The interface for managing the current window.",
      "startingLine": 1132,
      "typeExpression": "!webdriver.WebDriver.Window",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver.Window",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver.Window"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver.Window]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1132"
  },
  {
    "description": "An interface for managing timeout behavior for WebDriver instances.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Timeouts",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 1143,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1142"
  },
  {
    "description": "Specifies the amount of time the driver should wait when searching for an\nelement if it is not immediately present.\n<p/>\nWhen searching for a single element, the driver should poll the page\nuntil the element has been found, or this timeout expires before failing\nwith a {@code bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching\nfor multiple elements, the driver should poll the page until at least one\nelement has been found or this timeout has expired.\n<p/>\nSetting the wait timeout to 0 (its default value), disables implicit\nwaiting.\n<p/>\nIncreasing the implicit wait timeout should be used judiciously as it\nwill have an adverse effect on test run time, especially when used with\nslower location strategies like XPath.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Timeouts.prototype.implicitlyWait",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The amount of time to wait, in milliseconds.",
        "startingLine": 1170,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "ms",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the implicit wait timeout has been set.",
      "startingLine": 1171,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1154"
  },
  {
    "description": "Sets the amount of time to wait, in milliseconds, for an asynchronous script\nto finish execution before returning an error. If the timeout is less than or\nequal to 0, the script will be allowed to run indefinitely.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Timeouts.prototype.setScriptTimeout",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The amount of time to wait, in milliseconds.",
        "startingLine": 1187,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "ms",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the script timeout has been set.",
      "startingLine": 1188,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1183"
  },
  {
    "description": "Sets the amount of time to wait for a page load to complete before returning\nan error.  If the timeout is negative, page loads may be indefinite.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Timeouts.prototype.pageLoadTimeout",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The amount of time to wait, in milliseconds.",
        "startingLine": 1202,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "ms",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the timeout has been set.",
      "startingLine": 1203,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1200"
  },
  {
    "description": "An interface for managing the current window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 1218,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1217"
  },
  {
    "description": "Retrieves the window's current position, relative to the top left corner of\nthe screen.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window.prototype.getPosition",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the window's position in the form of a {x:number, y:number} object literal.",
      "startingLine": 1231,
      "typeExpression": "!webdriver.promise.Promise.<{x: number, y: number}>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "x"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "y"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<{x: number, y: number}>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;{x: number, y: number}&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1229"
  },
  {
    "description": "Repositions the current window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window.prototype.setPosition",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired horizontal position, relative to the left side of the screen.",
        "startingLine": 1245,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "x",
        "paramString": "number"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired vertical position, relative to the top of the of the screen.",
        "startingLine": 1247,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "y",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the command has completed.",
      "startingLine": 1249,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1244"
  },
  {
    "description": "Retrieves the window's current size.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window.prototype.getSize",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the window's size in the form of a {width:number, height:number} object literal.",
      "startingLine": 1264,
      "typeExpression": "!webdriver.promise.Promise.<{width: number, height: number}>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "width"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "height"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<{width: number, height: number}>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;{width: number, height: number}&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1263"
  },
  {
    "description": "Resizes the current window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window.prototype.setSize",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired window width.",
        "startingLine": 1278,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "width",
        "paramString": "number"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired window height.",
        "startingLine": 1279,
        "typeExpression": "number",
        "type": {
          "type": "NameExpression",
          "name": "number"
        },
        "typeList": [
          "number"
        ],
        "name": "height",
        "paramString": "number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the command has completed.",
      "startingLine": 1280,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1277"
  },
  {
    "description": "Maximizes the current window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Window.prototype.maximize",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the command has completed.",
      "startingLine": 1295,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1294"
  },
  {
    "description": "Interface for managing WebDriver log records.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Logs",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 1308,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1307"
  },
  {
    "description": "Fetches available log entries for the given type.\n\n<p/>Note that log buffers are reset after each call, meaning that\navailable log entries correspond to those entries not yet returned for a\ngiven log type. In practice, this means that this call will return the\navailable log entries since the last call, or from the start of the\nsession.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Logs.prototype.get",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The desired log type.",
        "startingLine": 1327,
        "typeExpression": "!webdriver.logging.Type",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.logging.Type",
          "nullable": false
        },
        "typeList": [
          "webdriver.logging.Type"
        ],
        "name": "type",
        "paramString": "!webdriver.logging.Type"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to a list of log entries for the specified type.",
      "startingLine": 1328,
      "typeExpression": "!webdriver.promise.Promise.<!Array.<!webdriver.logging.Entry>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "webdriver.logging.Entry",
                "nullable": false
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!Array.<!webdriver.logging.Entry>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!Array.&lt;!webdriver.logging.Entry&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1319"
  },
  {
    "description": "Retrieves the log types available to this driver.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.Logs.prototype.getAvailableLogTypes",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to a list of available log types.",
      "startingLine": 1351,
      "typeExpression": "!webdriver.promise.Promise.<!Array.<!webdriver.logging.Type>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "webdriver.logging.Type",
                "nullable": false
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!Array.<!webdriver.logging.Type>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!Array.&lt;!webdriver.logging.Type&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1350"
  },
  {
    "description": "An interface for changing the focus of the driver to another frame or window.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent driver.",
        "startingLine": 1364,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1363"
  },
  {
    "description": "Schedules a command retrieve the {@code document.activeElement} element on\nthe current document, or {@code document.body} if activeElement is not\navailable.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator.prototype.activeElement",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The active element.",
      "startingLine": 1378,
      "typeExpression": "!webdriver.WebElement",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebElement",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebElement"
      ]
    },
    "returnString": "&#33;[webdriver.WebElement]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1375"
  },
  {
    "description": "Schedules a command to switch focus of all future commands to the first frame\non the page.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator.prototype.defaultContent",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the driver has changed focus to the default content.",
      "startingLine": 1391,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1389"
  },
  {
    "description": "Schedules a command to switch the focus of all future commands to another\nframe on the page.\n<p/>\nIf the frame is specified by a number, the command will switch to the frame\nby its (zero-based) index into the {@code window.frames} collection.\n<p/>\nIf the frame is specified by a string, the command will select the frame by\nits name or ID. To select sub-frames, simply separate the frame names/IDs by\ndots. As an example, \"main.child\" will select the frame with the name \"main\"\nand then its child \"child\".\n<p/>\nIf the specified frame can not be found, the deferred result will errback\nwith a {@code bot.ErrorCode.NO_SUCH_FRAME} error.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator.prototype.frame",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The frame locator.",
        "startingLine": 1416,
        "typeExpression": "string|number",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "number"
            }
          ]
        },
        "typeList": [
          "string",
          "number"
        ],
        "name": "nameOrIndex",
        "paramString": "string&#124;number"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the driver has changed focus to the specified frame.",
      "startingLine": 1417,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1403"
  },
  {
    "description": "Schedules a command to switch the focus of all future commands to another\nwindow. Windows may be specified by their {@code window.name} attribute or\nby its handle (as returned by {@code webdriver.WebDriver#getWindowHandles}).\n<p/>\nIf the specificed window can not be found, the deferred result will errback\nwith a {@code bot.ErrorCode.NO_SUCH_WINDOW} error.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator.prototype.window",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name or window handle of the window to switch focus to.",
        "startingLine": 1435,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "nameOrHandle",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the driver has changed focus to the specified window.",
      "startingLine": 1437,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1429"
  },
  {
    "description": "Schedules a command to change focus to the active alert dialog. This command\nwill return a {@link bot.ErrorCode.NO_MODAL_DIALOG_OPEN} error if a modal\ndialog is not currently open.",
    "fileName": "webdriver",
    "name": "webdriver.WebDriver.TargetLocator.prototype.alert",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The open alert.",
      "startingLine": 1452,
      "typeExpression": "!webdriver.Alert",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.Alert",
        "nullable": false
      },
      "typeList": [
        "webdriver.Alert"
      ]
    },
    "returnString": "&#33;[webdriver.Alert]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1449"
  },
  {
    "description": "Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n{@link webdriver.Key}s or strings, appends each of the values to a string,\nand adds the chord termination key ({@link webdriver.Key.NULL}) and returns\nthe resultant string.\n\nNote: when the low-level webdriver key handlers see Keys.NULL, active\nmodifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.",
    "fileName": "webdriver",
    "name": "webdriver.Key.chord",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The key sequence to concatenate.",
        "startingLine": 1471,
        "typeExpression": "...string",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "repeatable": true
        },
        "typeList": [
          "string"
        ],
        "name": "var_args",
        "paramString": "...string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The null-terminated key sequence.",
      "startingLine": 1472,
      "typeExpression": "string",
      "type": {
        "type": "NameExpression",
        "name": "string"
      },
      "typeList": [
        "string"
      ]
    },
    "returnString": "string",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1463"
  },
  {
    "description": "Represents a DOM element. WebElements can be found by searching from the\ndocument root using a {@code webdriver.WebDriver} instance, or by searching\nunder another {@code webdriver.WebElement}:\n<pre><code>\n  driver.get('http://www.google.com');\n  var searchForm = driver.findElement(By.tagName('form'));\n  var searchBox = searchForm.findElement(By.name('q'));\n  searchBox.sendKeys('webdriver');\n</code></pre>\n\nThe WebElement is implemented as a promise for compatibility with the promise\nAPI. It will always resolve itself when its internal state has been fully\nresolved and commands may be issued against the element. This can be used to\ncatch errors when an element cannot be located on the page:\n<pre><code>\n  driver.findElement(By.id('not-there')).then(function(element) {\n    alert('Found an element that was not expected to be there!');\n  }, function(error) {\n    alert('The element was not found, as expected');\n  });\n</code></pre>",
    "extends": "{webdriver.promise.Deferred}",
    "fileName": "webdriver",
    "name": "webdriver.WebElement",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The parent WebDriver instance for this element.",
        "startingLine": 1517,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Either the opaque ID for the underlying DOM element assigned by the server, or a promise that will resolve to that ID or another WebElement.",
        "startingLine": 1519,
        "typeExpression": "!(string|webdriver.promise.Promise)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.promise.Promise"
            }
          ],
          "nullable": false
        },
        "typeList": [
          "string",
          "webdriver.promise.Promise"
        ],
        "name": "id",
        "paramString": "!(string&#124;webdriver.promise.Promise)"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1495"
  },
  {
    "description": "Compares to WebElements for equality.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.equals",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A WebElement.",
        "startingLine": 1586,
        "typeExpression": "!webdriver.WebElement",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebElement",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebElement"
        ],
        "name": "a",
        "paramString": "&#33;[webdriver.WebElement]"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "A WebElement.",
        "startingLine": 1587,
        "typeExpression": "!webdriver.WebElement",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebElement",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebElement"
        ],
        "name": "b",
        "paramString": "&#33;[webdriver.WebElement]"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved to whether the two WebElements are equal.",
      "startingLine": 1588,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1585"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getDriver",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The parent driver for this instance.",
      "startingLine": 1613,
      "typeExpression": "!webdriver.WebDriver",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebDriver",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebDriver"
      ]
    },
    "returnString": "&#33;[webdriver.WebDriver]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1613"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.toWireValue",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that resolves to this element's JSON representation as defined by the WebDriver wire protocol.",
      "startingLine": 1621,
      "typeExpression": "!webdriver.promise.Promise.<webdriver.WebElement.Id>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "webdriver.WebElement.Id"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<webdriver.WebElement.Id>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;webdriver.WebElement.Id&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1621"
  },
  {
    "description": "Schedule a command to find a descendant of this element. If the element\ncannot be found, a {@code bot.ErrorCode.NO_SUCH_ELEMENT} result will\nbe returned by the driver. Unlike other commands, this error cannot be\nsuppressed. In other words, scheduling a command to find an element doubles\nas an assert that the element is present on the page. To test whether an\nelement is present on the page, use {@code #isElementPresent} instead.\n\n<p>The search criteria for an element may be defined using one of the\nfactories in the {@link webdriver.By} namespace, or as a short-hand\n{@link webdriver.By.Hash} object. For example, the following two statements\nare equivalent:\n<code><pre>\nvar e1 = element.findElement(By.id('foo'));\nvar e2 = element.findElement({id:'foo'});\n</pre></code>\n\n<p>You may also provide a custom locator function, which takes as input\nthis WebDriver instance and returns a {@link webdriver.WebElement}, or a\npromise that will resolve to a WebElement. For example, to find the first\nvisible link on a page, you could write:\n<code><pre>\nvar link = element.findElement(firstVisibleLink);\n\nfunction firstVisibleLink(element) {\n  var links = element.findElements(By.tagName('a'));\n  return webdriver.promise.filter(links, function(link) {\n    return links.isDisplayed();\n  }).then(function(visibleLinks) {\n    return visibleLinks[0];\n  });\n}\n</pre></code>",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.findElement",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator strategy to use when searching for the element.",
        "startingLine": 1683,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "function()"
        ],
        "name": "locator",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A WebElement that can be used to issue commands against the located element. If the element is not found, the element will be invalidated and all scheduled commands aborted.",
      "startingLine": 1685,
      "typeExpression": "!webdriver.WebElement",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.WebElement",
        "nullable": false
      },
      "typeList": [
        "webdriver.WebElement"
      ]
    },
    "returnString": "&#33;[webdriver.WebElement]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1650"
  },
  {
    "description": "Schedules a command to test if there is at least one descendant of this\nelement that matches the given search criteria.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.isElementPresent",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator strategy to use when searching for the element.",
        "startingLine": 1709,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "function()"
        ],
        "name": "locator",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with whether an element could be located on the page.",
      "startingLine": 1711,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1706"
  },
  {
    "description": "Schedules a command to find all of the descendants of this element that\nmatch the given search criteria.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.findElements",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The locator strategy to use when searching for the elements.",
        "startingLine": 1725,
        "typeExpression": "!(webdriver.Locator|webdriver.By.Hash|Function)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "webdriver.Locator"
            },
            {
              "type": "NameExpression",
              "name": "webdriver.By.Hash"
            },
            {
              "type": "FunctionType",
              "params": []
            }
          ],
          "nullable": false
        },
        "typeList": [
          "webdriver.Locator",
          "webdriver.By.Hash",
          "function()"
        ],
        "name": "locator",
        "paramString": "!(webdriver.Locator&#124;webdriver.By.Hash&#124;Function)"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will resolve to an array of WebElements.",
      "startingLine": 1727,
      "typeExpression": "!webdriver.promise.Promise.<!Array.<!webdriver.WebElement>>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "TypeApplication",
            "expression": {
              "type": "NameExpression",
              "name": "Array"
            },
            "applications": [
              {
                "type": "NameExpression",
                "name": "webdriver.WebElement",
                "nullable": false
              }
            ],
            "nullable": false
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<!Array.<!webdriver.WebElement>>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;!Array.&lt;!webdriver.WebElement&gt;&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1722"
  },
  {
    "description": "Schedules a command to click on this element.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.click",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the click command has completed.",
      "startingLine": 1746,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1745"
  },
  {
    "description": "Schedules a command to type a sequence on the DOM element represented by this\ninstance.\n<p/>\nModifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is\nprocessed in the keysequence, that key state is toggled until one of the\nfollowing occurs:\n<ul>\n<li>The modifier key is encountered again in the sequence. At this point the\nstate of the key is toggled (along with the appropriate keyup/down events).\n</li>\n<li>The {@code webdriver.Key.NULL} key is encountered in the sequence. When\nthis key is encountered, all modifier keys current in the down state are\nreleased (with accompanying keyup events). The NULL key can be used to\nsimulate common keyboard shortcuts:\n<code><pre>\n    element.sendKeys(\"text was\",\n                     webdriver.Key.CONTROL, \"a\", webdriver.Key.NULL,\n                     \"now text is\");\n    // Alternatively:\n    element.sendKeys(\"text was\",\n                     webdriver.Key.chord(webdriver.Key.CONTROL, \"a\"),\n                     \"now text is\");\n</pre></code></li>\n<li>The end of the keysequence is encountered. When there are no more keys\nto type, all depressed modifier keys are released (with accompanying keyup\nevents).\n</li>\n</ul>\n<strong>Note:</strong> On browsers where native keyboard events are not yet\nsupported (e.g. Firefox on OS X), key events will be synthesized. Special\npunctionation keys will be synthesized according to a standard QWERTY en-us\nkeyboard layout.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.sendKeys",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The sequence of keys to type. All arguments will be joined into a single sequence (var_args is permitted for convenience).",
        "startingLine": 1790,
        "typeExpression": "...string",
        "type": {
          "type": "NameExpression",
          "name": "string",
          "repeatable": true
        },
        "typeList": [
          "string"
        ],
        "name": "var_args",
        "paramString": "...string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when all keys have been typed.",
      "startingLine": 1793,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1757"
  },
  {
    "description": "Schedules a command to query for the tag/node name of this element.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getTagName",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the element's tag name.",
      "startingLine": 1815,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1814"
  },
  {
    "description": "Schedules a command to query for the computed style of the element\nrepresented by this instance. If the element inherits the named style from\nits parent, the parent will be queried for its value.  Where possible, color\nvalues will be converted to their hex representation (e.g. #00ff00 instead of\nrgb(0, 255, 0)).\n<p/>\n<em>Warning:</em> the value returned will be as the browser interprets it, so\nit may be tricky to form a proper assertion.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getCssValue",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the CSS style property to look up.",
        "startingLine": 1835,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "cssStyleProperty",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the requested CSS value.",
      "startingLine": 1837,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1826"
  },
  {
    "description": "Schedules a command to query for the value of the given attribute of the\nelement. Will return the current value, even if it has been modified after\nthe page has been loaded. More exactly, this method will return the value of\nthe given attribute, unless that attribute is not present, in which case the\nvalue of the property with the same name is returned. If neither value is\nset, null is returned (for example, the \"value\" property of a textarea\nelement). The \"style\" attribute is converted as best can be to a\ntext representation with a trailing semi-colon. The following are deemed to\nbe \"boolean\" attributes and will return either \"true\" or null:\n\n<p>async, autofocus, autoplay, checked, compact, complete, controls, declare,\ndefaultchecked, defaultselected, defer, disabled, draggable, ended,\nformnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,\nloop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,\npaused, pubdate, readonly, required, reversed, scoped, seamless, seeking,\nselected, spellcheck, truespeed, willvalidate\n\n<p>Finally, the following commonly mis-capitalized attribute/property names\nare evaluated as expected:\n<ul>\n  <li>\"class\"\n  <li>\"readonly\"\n</ul>",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getAttribute",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The name of the attribute to query.",
        "startingLine": 1873,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "attributeName",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the attribute's value. The returned value will always be either a string or null.",
      "startingLine": 1874,
      "typeExpression": "!webdriver.promise.Promise.<?string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string",
            "nullable": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<?string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;?string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1850"
  },
  {
    "description": "Get the visible (i.e. not hidden by CSS) innerText of this element, including\nsub-elements, without any leading or trailing whitespace.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getText",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the element's visible text.",
      "startingLine": 1889,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1887"
  },
  {
    "description": "Schedules a command to compute the size of this element's bounding box, in\npixels.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getSize",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the element's size as a {@code {width:number, height:number}} object.",
      "startingLine": 1902,
      "typeExpression": "!webdriver.promise.Promise.<{width: number, height: number}>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "width"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "height"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<{width: number, height: number}>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;{width: number, height: number}&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1900"
  },
  {
    "description": "Schedules a command to compute the location of this element in page space.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getLocation",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved to the element's location as a {@code {x:number, y:number}} object.",
      "startingLine": 1915,
      "typeExpression": "!webdriver.promise.Promise.<{x: number, y: number}>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "RecordType",
            "fields": [
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "x"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              },
              {
                "type": "FieldType",
                "key": {
                  "type": "NameExpression",
                  "name": "y"
                },
                "value": {
                  "type": "NameExpression",
                  "name": "number"
                }
              }
            ]
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<{x: number, y: number}>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;{x: number, y: number}&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1914"
  },
  {
    "description": "Schedules a command to query whether the DOM element represented by this\ninstance is enabled, as dicted by the {@code disabled} attribute.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.isEnabled",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with whether this element is currently enabled.",
      "startingLine": 1929,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1927"
  },
  {
    "description": "Schedules a command to query whether this element is selected.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.isSelected",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with whether this element is currently selected.",
      "startingLine": 1941,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1940"
  },
  {
    "description": "Schedules a command to submit the form containing this element (or this\nelement if it is a FORM element). This command is a no-op if the element is\nnot contained in a form.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.submit",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the form has been submitted.",
      "startingLine": 1955,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1952"
  },
  {
    "description": "Schedules a command to clear the {@code value} of this element. This command\nhas no effect if the underlying DOM element is neither a text INPUT element\nnor a TEXTAREA element.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.clear",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when the element has been cleared.",
      "startingLine": 1969,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1966"
  },
  {
    "description": "Schedules a command to test whether this element is currently displayed.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.isDisplayed",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with whether this element is currently visible on the page.",
      "startingLine": 1981,
      "typeExpression": "!webdriver.promise.Promise.<boolean>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "boolean"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<boolean>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;boolean&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1980"
  },
  {
    "description": "Schedules a command to retrieve the outer HTML of this element.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getOuterHtml",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the element's outer HTML.",
      "startingLine": 1993,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#1992"
  },
  {
    "description": "Schedules a command to retrieve the inner HTML of this element.",
    "fileName": "webdriver",
    "name": "webdriver.WebElement.prototype.getInnerHtml",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved with the element's inner HTML.",
      "startingLine": 2012,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2011"
  },
  {
    "description": "Represents a modal dialog such as {@code alert}, {@code confirm}, or\n{@code prompt}. Provides functions to retrieve the message displayed with\nthe alert, accept or dismiss the alert, and set the response text (in the\ncase of {@code prompt}).",
    "extends": "{webdriver.promise.Deferred}",
    "fileName": "webdriver",
    "name": "webdriver.Alert",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The driver controlling the browser this alert is attached to.",
        "startingLine": 2026,
        "typeExpression": "!webdriver.WebDriver",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.WebDriver",
          "nullable": false
        },
        "typeList": [
          "webdriver.WebDriver"
        ],
        "name": "driver",
        "paramString": "&#33;[webdriver.WebDriver]"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "Either the message text displayed with this alert, or a promise that will be resolved to said text.",
        "startingLine": 2028,
        "typeExpression": "!(string|webdriver.promise.Promise.<string>)",
        "type": {
          "type": "TypeUnion",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "webdriver.promise.Promise"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          ],
          "nullable": false
        },
        "typeList": [
          "string",
          "webdriver.promise.Promise.<string>"
        ],
        "name": "text",
        "paramString": "!(string&#124;webdriver.promise.Promise.&lt;string&gt;)"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2022"
  },
  {
    "description": "Retrieves the message text displayed with this alert. For instance, if the\nalert were opened with alert(\"hello\"), then this would return \"hello\".",
    "fileName": "webdriver",
    "name": "webdriver.Alert.prototype.getText",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved to the text displayed with this alert.",
      "startingLine": 2060,
      "typeExpression": "!webdriver.promise.Promise.<string>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "string"
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<string>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;string&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2058"
  },
  {
    "description": "Accepts this alert.",
    "fileName": "webdriver",
    "name": "webdriver.Alert.prototype.accept",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when this command has completed.",
      "startingLine": 2070,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2069"
  },
  {
    "description": "Dismisses this alert.",
    "fileName": "webdriver",
    "name": "webdriver.Alert.prototype.dismiss",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when this command has completed.",
      "startingLine": 2082,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2081"
  },
  {
    "description": "Sets the response text on this alert. This command will return an error if\nthe underlying alert does not support response text (e.g. window.alert and\nwindow.confirm).",
    "fileName": "webdriver",
    "name": "webdriver.Alert.prototype.sendKeys",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The text to set.",
        "startingLine": 2096,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "text",
        "paramString": "string"
      }
    ],
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "A promise that will be resolved when this command has completed.",
      "startingLine": 2097,
      "typeExpression": "!webdriver.promise.Promise.<void>",
      "type": {
        "type": "TypeApplication",
        "expression": {
          "type": "NameExpression",
          "name": "webdriver.promise.Promise"
        },
        "applications": [
          {
            "type": "NameExpression",
            "name": "void",
            "reservedWord": true
          }
        ],
        "nullable": false
      },
      "typeList": [
        "!webdriver.promise.Promise.<void>"
      ]
    },
    "returnString": "!webdriver.promise.Promise.&lt;void&gt;",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2093"
  },
  {
    "description": "An error returned to indicate that there is an unhandled modal dialog on the\ncurrent page.",
    "extends": "{bot.Error}",
    "fileName": "webdriver",
    "name": "webdriver.UnhandledAlertError",
    "params": [
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The error message.",
        "startingLine": 2112,
        "typeExpression": "string",
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "typeList": [
          "string"
        ],
        "name": "message",
        "paramString": "string"
      },
      {
        "tagDef": {
          "name": "param",
          "multi": true,
          "docProperty": "params",
          "canHaveName": true,
          "canHaveType": true
        },
        "tagName": "param",
        "description": "The alert handle.",
        "startingLine": 2113,
        "typeExpression": "!webdriver.Alert",
        "type": {
          "type": "NameExpression",
          "name": "webdriver.Alert",
          "nullable": false
        },
        "typeList": [
          "webdriver.Alert"
        ],
        "name": "alert",
        "paramString": "&#33;[webdriver.Alert]"
      }
    ],
    "returnString": "",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2110"
  },
  {
    "description": "",
    "fileName": "webdriver",
    "name": "webdriver.UnhandledAlertError.prototype.getAlert",
    "returns": {
      "tagDef": {
        "name": "returns",
        "aliases": [
          "return"
        ],
        "canHaveType": true
      },
      "tagName": "return",
      "description": "The open alert.",
      "startingLine": 2127,
      "typeExpression": "!webdriver.Alert",
      "type": {
        "type": "NameExpression",
        "name": "webdriver.Alert",
        "nullable": false
      },
      "typeList": [
        "webdriver.Alert"
      ]
    },
    "returnString": "&#33;[webdriver.Alert]",
    "sourceLink": "https://code.google.com/p/selenium/source/browse/javascript/webdriver/webdriver.js#2127"
  }
]
}
