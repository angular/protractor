/// <reference path="../../built/index.d.ts" />
import {Browser} from 'protractor';
let browser: Browser;
browser.getProcessedConfig(0);
browser.getProcessedConfig('1');
browser.getProcessedConfig(true);
browser.getProcessedConfig(()=> {});
browser.forkNewDriverInstance(0);
browser.forkNewDriverInstance('1');
browser.forkNewDriverInstance(() => {});
browser.forkNewDriverInstance(0, 0);
browser.forkNewDriverInstance('1', '1');
browser.forkNewDriverInstance(() => {}, () => {});
browser.forkNewDriverInstance(true, true, true);
browser.restart(0);
browser.restart('1');
browser.restart(true);
browser.restart(() => {});
browser.useAllAngular2AppRoots(0);
browser.useAllAngular2AppRoots('1');
browser.useAllAngular2AppRoots(true);
browser.useAllAngular2AppRoots(() => {});
browser.waitForAngular(0);
browser.waitForAngular(true);
browser.waitForAngular(() => {});
browser.addMockModule(0, () => {});
browser.addMockModule(true, () => {});
browser.addMockModule(() => {}, () => {});
browser.clearMockModules(0);
browser.clearMockModules('1');
browser.clearMockModules(true);
browser.clearMockModules(() => {});
browser.removeMockModule();
browser.removeMockModule(0);
browser.removeMockModule(true);
browser.removeMockModule(() => {});
browser.getRegisteredMockModules(0);
browser.getRegisteredMockModules('1');
browser.getRegisteredMockModules(true);
browser.getRegisteredMockModules(() => {});
browser.get();
browser.get(0);
browser.get(true);
browser.get(() => {});
browser.refresh('1');
browser.refresh(true);
browser.refresh(() => {});
browser.refresh(100, 100);
browser.navigate(0);
browser.navigate('1');
browser.navigate(true);
browser.navigate(() => {});
browser.setLocation(0);
browser.setLocation(true);
browser.setLocation(() => {});
browser.setLocation('url', 'url');
browser.getLocationAbsUrl(0);
browser.getLocationAbsUrl('1');
browser.getLocationAbsUrl(true);
browser.getLocationAbsUrl(() => {});
browser.debugger(0);
browser.debugger('1');
browser.debugger(true);
browser.debugger(() => {});
browser.enterRepl(0, 0);
browser.enterRepl('1');
browser.enterRepl(true);
browser.enterRepl(() => {});
browser.pause(0, 0);
browser.pause('1');
browser.pause(true);
browser.pause(() => {});
browser.actions(0);
browser.actions('1');
browser.actions(true);
browser.actions(() => {});
browser.wait('condition', '1');
browser.wait('condition', true);
browser.wait('condition', () => {});
browser.wait('condition', 100, 0);
browser.wait('condition', 100, true);
browser.wait('condition', 100, () => {});
browser.getCurrentUrl(0);
browser.getCurrentUrl('1');
browser.getCurrentUrl(true);
browser.getCurrentUrl(() => {});
browser.getTitle(0);
browser.getTitle('1');
browser.getTitle(true);
browser.getTitle(() => {});
browser.takeScreenshot(0);
browser.takeScreenshot('1');
browser.takeScreenshot(true);
browser.takeScreenshot(() => {});
